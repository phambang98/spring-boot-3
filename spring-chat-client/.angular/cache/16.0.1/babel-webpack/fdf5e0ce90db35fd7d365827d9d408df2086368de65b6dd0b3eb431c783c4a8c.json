{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MessageRequest } from \"../_dtos/chat/MessageRequest\";\nimport { NbMessage } from \"../_dtos/chat/NbMessage\";\nlet ChatService = class ChatService {\n  constructor(httpClient, friendService, storage, notificationService) {\n    this.httpClient = httpClient;\n    this.friendService = friendService;\n    this.storage = storage;\n    this.notificationService = notificationService;\n    this._fetch = new BehaviorSubject(0);\n    this.fetch = this._fetch.asObservable();\n    this.myNbMessages = new BehaviorSubject([]);\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.fileOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'multipart/form-data'\n      })\n    };\n    this.httpOptions.headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + this.storage.getToken()\n    });\n    this.nbMessages = this.myNbMessages.asObservable();\n  }\n  updateMessage(userMessages) {\n    let messageValue = this.myNbMessages.value;\n    let dataMessage = userMessages.map(m => {\n      return new NbMessage(m);\n    });\n    messageValue.concat(dataMessage);\n    this.myNbMessages.next(messageValue);\n    this.friendService.sortFriends();\n  }\n  updateFetch(value) {\n    this._fetch.next(value);\n  }\n  fetchMessages(recipientId) {\n    return this.httpClient.get(`${environment.DOMAIN}/api/message/${recipientId}`, this.httpOptions).pipe(map(msgs => {\n      this.updateMessage(msgs);\n      return msgs;\n    }));\n  }\n  createMessage(messageRequest, files) {\n    let messageId;\n    if (files.length != 0) {\n      let formData = new FormData();\n      formData.append('files', files);\n      formData.append('recipientId', messageRequest.recipientId + \"\");\n      this.createMessageFile(formData).subscribe({\n        next: v => {\n          messageId = v.id;\n        },\n        error: err => {\n          console.log(\"err-createMessageFile\", err);\n        }\n      });\n    }\n    this.notificationService.sendMessage(new MessageRequest(messageRequest.recipientId, messageRequest.content, messageId ? messageId : null));\n  }\n  createMessageFile(data) {\n    return this.httpClient.post(`${environment.DOMAIN}/api/message/files`, data, this.fileOptions).pipe(map(v => {\n      return v;\n    }));\n  }\n};\nChatService = __decorate([Injectable()], ChatService);\nexport { ChatService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}