{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport * as SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { environment } from 'src/environments/environment';\nlet NotificationService = class NotificationService {\n  constructor(userService, storageService, chatService, messageService, messagesService) {\n    this.userService = userService;\n    this.storageService = storageService;\n    this.chatService = chatService;\n    this.messageService = messageService;\n    this.messagesService = messagesService;\n    this.topic = `/notifications/${this.userService.getProfile().id}/queue/messages`;\n  }\n  suscribe() {\n    let ws = new SockJS(`${environment.DOMAIN}/ws`);\n    this.stompClient = Stomp.over(ws);\n    this.stompClient.debug = () => {};\n    const _this = this;\n    _this.stompClient.connect({\n      \"Authorization\": \"Bearer \" + this.storageService.getToken()\n    }, function (frame) {\n      _this.stompClient.subscribe(_this.topic, function (sdkEvent) {\n        console.log(_this);\n        console.log(_this.messagesService);\n        console.log(sdkEvent);\n        _this.onMessageReceived(sdkEvent);\n      });\n    }, function (error) {\n      setTimeout(() => _this.suscribe(), 5000);\n    });\n  }\n  onMessageReceived(message) {\n    let json = JSON.parse(message.body);\n    if (json['type'] == \"USER_MESSAGE_ADDED\") {\n      let data = json['data'];\n      console.log(this.messagesService);\n      this.messagesService.updateMessage([data]);\n    } else if (json['type'] == \"USER_CONVERSATION_UPDATED\" || json['type'] == \"USER_CONVERSATION_ADDED\") {\n      let data = json['data'];\n      this.chatService.updateFriends([data]);\n    } else {\n      console.log(\"json\", json);\n    }\n  }\n  sendMessage(messageRequest) {\n    this.stompClient.send(\"/app/message\", {}, JSON.stringify(messageRequest));\n  }\n};\nNotificationService = __decorate([Injectable()], NotificationService);\nexport { NotificationService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}