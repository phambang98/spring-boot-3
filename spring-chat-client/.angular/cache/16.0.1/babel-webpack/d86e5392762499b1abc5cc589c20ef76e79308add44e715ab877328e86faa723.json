{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/auth.service\";\nlet JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(authenticationService) {\n      this.authenticationService = authenticationService;\n    }\n    intercept(request, next) {\n      // add auth header with jwt if user is logged in and request is to the api url\n      const token = this.authenticationService.getToken();\n      const isApiUrl = request.url.startsWith(environment.DOMAIN);\n      if (token && isApiUrl) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n      return next.handle(request).pipe(catchError(error => {\n        console.log('Returning caught observable');\n        if (error.status === 401) {\n          window.location.href = \"/login\";\n          return throwError(() => new Error('Authentication'));\n        }\n        return throwError(() => new Error('The Error'));\n      }));\n    }\n  }\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n  return JwtInterceptor;\n})();\nexport { JwtInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}