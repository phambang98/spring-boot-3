{"ast":null,"code":"import * as SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data.service\";\nimport * as i2 from \"./user.service\";\nimport * as i3 from \"./token-storage.service\";\nlet NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    constructor(dataService, userService, storageService) {\n      this.dataService = dataService;\n      this.userService = userService;\n      this.storageService = storageService;\n      this.topic = `/notifications/${this.userService.getProfile().id}`;\n    }\n    suscribe() {\n      let ws = new SockJS(`${environment.DOMAIN}/ws`);\n      this.stompClient = Stomp.over(ws);\n      this.stompClient.debug = () => {};\n      const _this = this;\n      _this.stompClient.connect({\n        \"Authorization\": \"Bearer \" + this.storageService.getToken()\n      }, function (frame) {\n        _this.stompClient.subscribe(_this.topic, function (sdkEvent) {\n          _this.onMessageReceived(sdkEvent);\n        });\n      }, function (error) {\n        setTimeout(() => _this.suscribe(), 5000);\n      });\n    }\n    onMessageReceived(message) {\n      let json = JSON.parse(message.body);\n      if (json['type'] == \"USER_MESSAGE_ADDED\") {\n        let data = json['data'];\n        this.dataService.updateUserMessages([data]);\n      } else if (json['type'] == \"USER_CONVERSATION_UPDATED\" || json['type'] == \"USER_CONVERSATION_ADDED\") {\n        let data = json['data'];\n        this.dataService.updateFriends([data]);\n      } else {\n        console.log(json);\n      }\n    }\n  }\n  NotificationService.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.TokenStorageService));\n  };\n  NotificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac\n  });\n  return NotificationService;\n})();\nexport { NotificationService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}