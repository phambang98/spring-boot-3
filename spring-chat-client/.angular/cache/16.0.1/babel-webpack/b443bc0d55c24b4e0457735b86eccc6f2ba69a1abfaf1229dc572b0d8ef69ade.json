{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { NbMessage } from \"../_dtos/chat/NbMessage\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment\";\nimport { map } from \"rxjs/operators\";\nimport { MessageRequest } from \"../_dtos/chat/MessageRequest\";\nimport * as SockJS from \"sockjs-client\";\nimport { Stomp } from \"@stomp/stompjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./chat.service\";\nimport * as i3 from \"./token-storage.service\";\nimport * as i4 from \"./user.service\";\nlet MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(httpClient, chatService, storage, userService) {\n      this.httpClient = httpClient;\n      this.chatService = chatService;\n      this.storage = storage;\n      this.userService = userService;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.fileOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'multipart/form-data'\n        })\n      };\n      this.topic = `/notifications/${this.userService.getProfile().id}/queue/messages`;\n      this.httpOptions.headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.storage.getToken()\n      });\n      this.myNbMessages = new BehaviorSubject([]);\n      this.nbMessages = this.myNbMessages.asObservable();\n      this.myProfile = this.userService.getProfile();\n    }\n    suscribe() {\n      let ws = new SockJS(`${environment.DOMAIN}/ws`);\n      this.stompClient = Stomp.over(ws);\n      this.stompClient.debug = () => {};\n      const _this = this;\n      _this.stompClient.connect({\n        \"Authorization\": \"Bearer \" + this.storage.getToken()\n      }, function (frame) {\n        _this.stompClient.subscribe(_this.topic, function (sdkEvent) {\n          _this.onMessageReceived(sdkEvent);\n        });\n      }, function (error) {\n        setTimeout(() => _this.suscribe(), 5000);\n      });\n    }\n    onMessageReceived(message) {\n      let json = JSON.parse(message.body);\n      if (json['type'] == \"USER_MESSAGE_ADDED\") {\n        let data = json['data'];\n        this.updateMessage([data]);\n      } else if (json['type'] == \"USER_CONVERSATION_UPDATED\" || json['type'] == \"USER_CONVERSATION_ADDED\") {\n        let data = json['data'];\n        this.chatService.updateFriends([data]);\n      } else {\n        console.log(\"json\", json);\n      }\n    }\n    sendMessage(messageRequest) {\n      this.stompClient.send(\"/app/message\", {}, JSON.stringify(messageRequest));\n    }\n    updateMessage(userMessages) {\n      let messageValue = this.myNbMessages.value;\n      let dataMessage = userMessages.map(m => {\n        let nm = new NbMessage(m);\n        if (m.senderId == this.myProfile.id) {\n          nm.updateUser(this.myProfile.userName, this.myProfile.imageUrl, true);\n        } else {\n          let friend = this.chatService.getFriend(m.senderId);\n          nm.updateUser(friend.userName, friend.imageUrl, false);\n        }\n        return nm;\n      });\n      this.myNbMessages.next(messageValue.concat(dataMessage));\n      this.chatService.sortFriends();\n    }\n    fetchMessages(recipientId) {\n      return this.httpClient.get(`${environment.DOMAIN}/api/message/${recipientId}`, this.httpOptions).pipe(map(msgs => {\n        this.updateMessage(msgs);\n        return msgs;\n      }));\n    }\n    createMessage(messageRequest, files) {\n      let messageId;\n      if (files.length != 0) {\n        let formData = new FormData();\n        formData.append('files', files);\n        formData.append('recipientId', messageRequest.recipientId + \"\");\n        this.createMessageFile(formData).subscribe({\n          next: v => {\n            messageId = v.id;\n          },\n          error: err => {\n            console.log(\"err-createMessageFile\", err);\n          }\n        });\n      }\n      this.sendMessage(new MessageRequest(messageRequest.recipientId, messageRequest.content, messageId ? messageId : null));\n    }\n    createMessageFile(data) {\n      return this.httpClient.post(`${environment.DOMAIN}/api/message/files`, data, this.fileOptions).pipe(map(v => {\n        return v;\n      }));\n    }\n  }\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ChatService), i0.ɵɵinject(i3.TokenStorageService), i0.ɵɵinject(i4.UserService));\n  };\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac\n  });\n  return MessageService;\n})();\nexport { MessageService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}