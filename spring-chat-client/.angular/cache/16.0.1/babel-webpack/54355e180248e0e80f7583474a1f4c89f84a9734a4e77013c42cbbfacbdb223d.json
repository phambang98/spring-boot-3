{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./data.service\";\nimport * as i3 from \"./token-storage.service\";\nimport * as i4 from \"./notification.service\";\nlet FriendService = /*#__PURE__*/(() => {\n  class FriendService {\n    constructor(httpClient, dataService, storage, notificationService) {\n      this.httpClient = httpClient;\n      this.dataService = dataService;\n      this.storage = storage;\n      this.notificationService = notificationService;\n      this.myFriendProfiles = new Subject();\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.fileOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'multipart/form-data'\n        })\n      };\n      this.httpOptions.headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.storage.getToken()\n      });\n      this.friendProfiles = this.myFriendProfiles.asObservable();\n    }\n    updateFriends(newFriends) {\n      this.myFriendProfiles.next(newFriends);\n    }\n    sortFriends() {\n      this.friendProfiles.pipe(map(result => result.sort((obj1, obj2) => {\n        if (obj1.lastMsg > obj2.lastMsg) {\n          return 1;\n        }\n        if (obj1.lastMsg < obj2.lastMsg) {\n          return -1;\n        }\n        return 0;\n      })));\n    }\n    fetchFriends() {\n      return this.httpClient.get(`${environment.DOMAIN}/api/chat`, this.httpOptions).pipe(map(friends => {\n        this.updateFriends(friends);\n        return friends;\n      }));\n    }\n    createFriend(userName) {\n      return this.httpClient.post(`${environment.DOMAIN}/api/chat?userName=${userName}`, this.httpOptions).pipe(map(friend => {\n        this.updateFriends([friend]);\n      }));\n    }\n    createMessageFile(data) {\n      return this.httpClient.post(`${environment.DOMAIN}/api/chat/messages/files`, data, this.fileOptions).pipe(map(v => {\n        return v;\n      }));\n    }\n    getFriends() {\n      return this.getFriends();\n    }\n    getFriend(id) {\n      return this.friendProfiles.pipe(map(txs => txs.find(txn => txn.id === id)));\n    }\n  }\n  FriendService.ɵfac = function FriendService_Factory(t) {\n    return new (t || FriendService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DataService), i0.ɵɵinject(i3.TokenStorageService), i0.ɵɵinject(i4.NotificationService));\n  };\n  FriendService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FriendService,\n    factory: FriendService.ɵfac\n  });\n  return FriendService;\n})();\nexport { FriendService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}