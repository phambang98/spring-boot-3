{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nlet DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor() {\n      this._friends = new BehaviorSubject(new Map());\n      this.friends = this._friends.asObservable();\n      this._userMessages = new BehaviorSubject(new Map());\n    }\n    updateUserMessages(msgs) {\n      let oldMsgs = this._userMessages.value;\n      msgs.map(msg => oldMsgs.set(msg.id, msg));\n      this._userMessages.next(oldMsgs);\n      this.sortFriends();\n    }\n    updateFriends(newFriends) {\n      debugger;\n      let friends = this._friends.value;\n      newFriends.map(v => {\n        let friend = friends.get(v.id);\n        if (friend) {\n          friend.update(v.id, v.email, v.userName, v.imgUrl, v.blockedBy, v.updatedAt);\n        } else {\n          friends.set(v.id, v);\n        }\n      });\n      this._friends.next(friends);\n    }\n    sortFriends() {\n      let msgs = this._userMessages.value;\n      let friends = this._friends.value;\n      msgs.forEach((msg, k) => {\n        let friend = friends.get(msg.chatId);\n        if (friend.lastMsgAt && friend.lastMsgAt < msg.createdAt) {\n          friend.updateConv(msg.content, msg.createdAt);\n        }\n        // if (!msg.readAt) { friend.incrementUnread() }\n      });\n\n      this._friends.next(friends);\n    }\n    getMessages(chatId) {\n      return this._userMessages.pipe(map(m => {\n        let msgs = [];\n        m.forEach((v, k) => {\n          if (v.chatId == chatId) msgs.push(v);\n        });\n        // msgs.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime())\n        return msgs;\n      }));\n    }\n    getFriends() {\n      return this._friends.pipe(map(m => {\n        let friends = [];\n        m.forEach((v, k) => {\n          friends.push(v);\n        });\n        // friends.sort((a, b) => a.lastMsgAt.getTime() - b.lastMsgAt.getTime())\n        return friends;\n      }));\n    }\n    getAllFriend() {\n      return this._friends.value;\n    }\n  }\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)();\n  };\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac\n  });\n  return DataService;\n})();\nexport { DataService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}