{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./data.service\";\nimport * as i3 from \"./token-storage.service\";\nlet ChatService = /*#__PURE__*/(() => {\n  class ChatService {\n    constructor(httpClient, dataService, storage) {\n      this.httpClient = httpClient;\n      this.dataService = dataService;\n      this.storage = storage;\n      this._fetch = new BehaviorSubject(0);\n      this.fetch = this._fetch.asObservable();\n      this.myFriendProfiles = new BehaviorSubject([]);\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.httpOptions.headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.storage.getToken()\n      });\n      this.friendProfiles = this.myFriendProfiles.asObservable();\n    }\n    updateFriends(newFriends) {\n      let friendValue = this.myFriendProfiles.value;\n      newFriends.forEach(f => friendValue.push(f));\n      this.myFriendProfiles.next(friendValue);\n    }\n    sortFriends() {\n      this.myFriendProfiles.value.sort((obj1, obj2) => {\n        if (obj1.lastMsg > obj2.lastMsg) {\n          return 1;\n        }\n        if (obj1.lastMsg < obj2.lastMsg) {\n          return -1;\n        }\n        return 0;\n      });\n    }\n    fetchFriends() {\n      return this.httpClient.get(`${environment.DOMAIN}/api/friend`, this.httpOptions).pipe(map(friends => {\n        this.updateFriends(friends);\n        return friends;\n      }));\n    }\n    createFriend(userName) {\n      return this.httpClient.post(`${environment.DOMAIN}/api/friend?userName=${userName}`, this.httpOptions).pipe(map(friend => {\n        this.updateFriends([friend]);\n      }));\n    }\n    getFriendsAll() {\n      return this.friendProfiles;\n    }\n    getFriend(id) {\n      return this.myFriendProfiles.value.find(x => x.id === id);\n    }\n    updateFetch(value) {\n      this._fetch.next(value);\n    }\n  }\n  ChatService.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DataService), i0.ɵɵinject(i3.TokenStorageService));\n  };\n  ChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac\n  });\n  return ChatService;\n})();\nexport { ChatService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}