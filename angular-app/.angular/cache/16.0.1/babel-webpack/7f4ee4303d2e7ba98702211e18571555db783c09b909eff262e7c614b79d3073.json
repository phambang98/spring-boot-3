{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./data.service\";\nimport * as i3 from \"./token-storage.service\";\nlet ChatService = /*#__PURE__*/(() => {\n  class ChatService {\n    constructor(httpClient, dataService, storage) {\n      this.httpClient = httpClient;\n      this.dataService = dataService;\n      this.storage = storage;\n      this._fetch = new BehaviorSubject(0);\n      this.fetch = this._fetch.asObservable();\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.fileOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'multipart/form-data'\n        })\n      };\n      this.httpOptions.headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.storage.getToken()\n      });\n    }\n    fetchFriends() {\n      return this.httpClient.get(`${environment.DOMAIN}/api/chat`, this.httpOptions).pipe(map(friends => {\n        this.dataService.updateFriends(friends);\n      }));\n    }\n    updateFetch(value) {\n      this._fetch.next(value);\n    }\n    fetchAllMessages() {\n      return this.httpClient.post(`${environment.DOMAIN}/api/chat/messages`, Array.from(this.dataService.getAllFriend().keys()), this.httpOptions).pipe(map(msgs => {\n        this.dataService.updateUserMessages(msgs);\n      }));\n    }\n    fetchMessages(id) {\n      return this.httpClient.get(`${environment.DOMAIN}/api/chat/${id}/messages`, this.httpOptions).pipe(map(msgs => {\n        this.dataService.updateUserMessages(msgs);\n      }));\n    }\n    createFriend(userName) {\n      return this.httpClient.post(`${environment.DOMAIN}/api/chat?userName=${userName}`, this.httpOptions).pipe(map(friend => {\n        this.dataService.updateFriends([friend]);\n      }));\n    }\n    createMessageText(id, content) {\n      return this.httpClient.post(`${environment.DOMAIN}/api/chat/${id}/messages/text`, {\n        content\n      }, this.httpOptions).pipe(map(v => {\n        this.dataService.updateUserMessages([v]);\n        return v;\n      }));\n    }\n    createMessageFile(id, content, data) {\n      return this.httpClient.post(`${environment.DOMAIN}/api/chat/${id}/messages/files?content=${content}`, data).pipe(map(v => {\n        this.dataService.updateUserMessages([v]);\n        return v;\n      }));\n    }\n    getFriends() {\n      return this.dataService.getFriends();\n    }\n    getFriend(id) {\n      return this.dataService.getAllFriend().get(id);\n    }\n    getMessages(covId) {\n      return this.dataService.getMessages(covId);\n    }\n  }\n  ChatService.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DataService), i0.ɵɵinject(i3.TokenStorageService));\n  };\n  ChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac\n  });\n  return ChatService;\n})();\nexport { ChatService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}